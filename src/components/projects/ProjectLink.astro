---
// Components
import { Icon } from "astro-icon/components";
// Types
import type { HTMLAttributes } from "astro/types";
interface Props extends HTMLAttributes<"li"> {
    link: {
        label: string;
        url: string;
    };
}
// Props
const { link, ...attributes } = Astro.props;
// Error handling
if (!link) throw new Error("No props provided for ProjectLink.");
if (!link.label) throw new Error("No label provided for ProjectLink.");
if (!link.url) throw new Error("No url provided for ProjectLink.");
const { label, url } = link;
---

<li class:list={["project-link-container", attributes.class]} {...attributes}>
    <project-link>
        <a
            href={url}
            class="project-link-anchor"
            target="_blank"
            rel="noopener"
            aria-describedby="tooltip"
        >
            <Icon
                name={label === "view live" ? "lucide:external-link" : "lucide:github"}
                size={30}
            />
        </a>
        <div class="link-tooltip" id="tooltip" role="tooltip">
            {label}
            <div class="link-tooltip-arrow" id="arrow"></div>
        </div>
    </project-link>
</li>

<style lang="scss">
    @use "../../sass/abstracts" as *;

    .project-link-container {
        position: relative;
    }

    .project-link-anchor {
        font-size: $fs-500;
        text-transform: capitalize;
        color: $primary-800;
        display: grid;
        place-items: center;
        margin-top: 2rem;
        transition: 200ms ease-in-out;
        text-decoration: underline;
        padding: 10px 2px 5px;

        &:hover,
        &:focus-visible {
            font-weight: $bold;
        }

        &:focus-visible {
            outline: 3px solid $blue-sapphire;
            outline-offset: -0.26rem;
        }

        &:visited {
            color: $primary-800;
        }
    }

    .link-tooltip {
        display: none;
        background: $neutral-900;
        color: $primary-50;
        font-weight: $semi-bold;
        padding: 0.5rem;
        border-radius: 0.5rem;
        font-size: $fs-400;
        width: max-content;
        position: absolute;
        top: 0;
        left: 0;
    }

    .link-tooltip-arrow {
        position: absolute;
        background: $neutral-900;
        width: 0.5rem;
        height: 0.5rem;
        transform: rotate(45deg);
    }
</style>
<script>
    /*  Floating UI utility */
    import { computePosition, flip, shift, offset, arrow } from "@floating-ui/dom";
    /* Types */
    import type { Placement, Coords } from "@floating-ui/dom";
    /* create a subtype for only simplified placements */
    type TopRightBottomOrLeft = Extract<Placement, "top" | "right" | "bottom" | "left">;
    class ProjectLink extends HTMLElement {
        /* constructor contains scripts to run on every instance of loading the element. */
        constructor() {
            /* Call super() before adding scripts to a custom element */
            super();
        }
        /* connectedCallback is a lifecycle method that runs when the element is added to the DOM */
        connectedCallback() {
            /* Get the dom elements */
            const projectLink: HTMLAnchorElement | null =
                this.querySelector(".project-link-anchor");
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            const arrowElement: HTMLDivElement | null = this.querySelector(".link-tooltip-arrow");
            /* Ensure the elements are defined */
            if (!projectLink) throw new Error("projectLink anchor element is undefined");
            if (!tooltip) throw new Error("tooltip element is undefined");
            if (!arrowElement) throw new Error("arrowElement is undefined");
            type ValidEvents = "mouseenter" | "mouseleave" | "focus" | "blur";
            const eventMap: ReadonlyMap<ValidEvents, VoidFunction> = new Map<
                ValidEvents,
                VoidFunction
            >([
                ["mouseenter", this.showTooltip.bind(this)],
                ["mouseleave", this.hideTooltip.bind(this)],
                ["focus", this.showTooltip.bind(this)],
                ["blur", this.hideTooltip.bind(this)],
            ]);
            eventMap.forEach((fn, event) => {
                projectLink.addEventListener(event, fn);
            });
        }
        isArrowData(input: unknown): input is Partial<Coords> & {
            centerOffset: number;
            alignmentOffset?: number;
        } {
            if (!input) return false;
            if (typeof input !== "object") return false;
            if (!("centerOffset" in input)) return false;
            return "x" in input || "y" in input;
        }
        isTopRightBottomOrLeft(input: unknown): input is TopRightBottomOrLeft {
            if (typeof input !== "string") return false;
            return ["top", "right", "bottom", "left"].includes(input);
        }
        update({
            projectLink,
            tooltip,
            arrowElement,
        }: {
            projectLink: HTMLAnchorElement;
            tooltip: HTMLDivElement;
            arrowElement: HTMLDivElement;
        }) {
            computePosition(projectLink, tooltip, {
                placement: "top",
                middleware: [
                    offset(5),
                    flip(),
                    shift({ padding: 5 }),
                    arrow({ element: arrowElement, padding: 5 }),
                ],
            }).then(({ x, y, placement, middlewareData }) => {
                Object.assign(tooltip.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });

                // get the data for the arrow placement
                const getArrowData = (data: typeof middlewareData.arrow) => {
                    if (!data) throw new Error("data passed to getArrowData is undefined");
                    if (data.x) return { x: data.x, y: undefined, ...data };
                    if (data.y) return { x: undefined, y: data.y, ...data };
                    throw new Error("middlewareData.arrow is not a valid object");
                };
                const arrowData = getArrowData(middlewareData.arrow);
                const { x: arrowX, y: arrowY } = arrowData;
                const simplePlacement = placement.split("-")[0]?.trim();
                if (!this.isTopRightBottomOrLeft(simplePlacement))
                    throw new Error("simplePlacement is not a valid string");
                const staticSide = {
                    top: "bottom",
                    right: "left",
                    bottom: "top",
                    left: "right",
                }[simplePlacement];

                Object.assign(arrowElement.style, {
                    left: typeof arrowX === "number" ? `${arrowX}px` : "",
                    top: typeof arrowY === "number" ? `${arrowY}px` : "",
                    right: "",
                    bottom: "",
                    [staticSide]: "-0.25rem",
                });
            });
        }
        showTooltip() {
            const projectLink: HTMLAnchorElement | null =
                this.querySelector(".project-link-anchor");
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            const arrowElement: HTMLDivElement | null = this.querySelector(".link-tooltip-arrow");
            if (!projectLink) throw new Error("projectLink anchor element is undefined");
            if (!arrowElement) throw new Error("arrowElement is undefined");
            if (tooltip) {
                tooltip.style.display = "block";
                this.update({ projectLink, tooltip, arrowElement });
            }
        }
        hideTooltip() {
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            if (tooltip) {
                tooltip.style.display = "";
            }
        }
        disconnectedCallback() {
            const projectLink = this.querySelector(".project-link-anchor");
            if (projectLink) {
                projectLink.removeEventListener("mouseenter", this.showTooltip.bind(this));
                projectLink.removeEventListener("mouseleave", this.hideTooltip.bind(this));
                projectLink.removeEventListener("focus", this.showTooltip.bind(this));
                projectLink.removeEventListener("blur", this.hideTooltip.bind(this));
            }
        }
    }
    customElements.define("project-link", ProjectLink);
</script>
