---
/* components/ProfileSection/ProfileSection.astro */
import SectionHeading from "@components/ui/SectionHeading.astro";
import ProfileList from "@profile/ProfileList.astro";
import { Icon } from "astro-icon/components";
---
<SectionHeading
  preamble={"more about me"}
  heading={"profile"}
  colour={"text-neutral-900"}
/>

<ProfileList />
<form class="profile-form">
  <fieldset class="profile-nav-fieldset">
    <legend class="sr-only">Choose an option to learn more about me</legend>
    <input
      type="radio"
      name="profile-nav"
      id="profileAboutMe"
      class="sr-only"
      value="aboutMe"
      checked
    />
    <label for="profileAboutMe" class="profile-form-icon">
      <Icon name="material-symbols:sentiment-very-satisfied-outline-rounded" size={48}/>
      <span class="sr-only">About Me</span>
    </label>
    <input
      type="radio"
      name="profile-nav"
      id="profileInterests"
      class="sr-only"
      value="interests"
    />
    <label for="profileInterests" class="profile-form-icon">
      <Icon name="material-symbols:interests-outline-rounded" size={48}/>
      <span class="sr-only">Interests</span>
    </label>
    <input
      type="radio"
      name="profile-nav"
      id="profileCoffee"
      class="sr-only"
      value="coffee"
    />
    <label for="profileCoffee" class="profile-form-icon">
    <Icon name="material-symbols:coffee-outline-rounded" size={48}/>
      <span class="sr-only">Coffee</span>
    </label>
  </fieldset>
</form>
<p class="profile-instructions">
  Click the icons above to learn a bit more about me.
</p>
<!-- profile section end-->
<script>
  {/* Profile section navigation through radio button set /*
import type { ComponentProps } from "astro/types";
  /* Query the DOM for the profile form and the radio buttons */}
  const profileForm: HTMLFormElement | null = document.querySelector(".profileForm");
  {/* The current value of the radio button set */}
  type CurrentValue = "aboutMe" | "coffee" | "interests";
  let currentValue: CurrentValue = "aboutMe";
  {/* always load the page with the aboutMe radio button checked */}
  {/* Create an object to hold the current value of the radio button set */}
  const aboutMeContents = document.querySelector(".aboutMeItem");
  const interestsContents = document.querySelector(".interestsItem");
  const coffeeContents = document.querySelector(".coffeeItem");
  {/* Update the displayed content based on state */}
  const updateContent = (value: CurrentValue) => {
    switch (value){
      case "interests":
        interestsContents?.classList.remove("hidden");
        coffeeContents?.classList.add("hidden");
        aboutMeContents?.classList.add("hidden");
        break;
      case "coffee":
        interestsContents?.classList.add("hidden");
        coffeeContents?.classList.remove("hidden");
        aboutMeContents?.classList.add("hidden");
        break;
    default:
      interestsContents?.classList.add("hidden");
      coffeeContents?.classList.add("hidden");
      aboutMeContents?.classList.remove("hidden");
      break;
    }
  };
  {/* Handle changing the currently selected radio button */}
  const handleChange = (event: Event) => {
    const selectedInput = event.target as HTMLInputElement;
    const newValue = selectedInput.value;
    if (!selectedInput.checked || !newValue || !(typeof(newValue) === "string")) return;
    if (newValue === currentValue) return;
    if (newValue === "aboutMe" || newValue === "interests" || newValue === "coffee") {
      currentValue = newValue;
      updateContent(currentValue);
      return;
    }
    return;
  };

  {/* Handle keyboard input when the profile navigation is in focus */}
  const handleKeypress = (event: KeyboardEvent) => {
    const selectedInput = event.target
    console.log(selectedInput)
    const focusedInput = event?.target;
    if (event.code !== "Enter") {
      return;
    } else {
      if (!focusedInput) throw new Error("No focused input found");
      if (!(focusedInput instanceof HTMLInputElement)) throw new Error("Focused input is not an input element");
      focusedInput.checked = true;
      if (!focusedInput.value) throw new Error("Focused input has no value");
      if (focusedInput.value === currentValue) return;
      if (focusedInput.value === "aboutMe" || focusedInput.value === "interests" || focusedInput.value === "coffee") {
        currentValue = focusedInput.value;
        updateContent(currentValue);
      }
    }
  };
  if (profileForm) {
    {/* create an event listener for when the radio button selection is changed */}
    profileForm.addEventListener(
      "change",
      handleChange
    );
    {/* event listener for keyboard navigation */}
    profileForm.addEventListener(
      "keydown",
      handleKeypress
    );
  }
</script>
