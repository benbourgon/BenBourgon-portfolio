<!-- <element-with-tooltip>
    <slot name="tooltip-anchor" />
    <div class="tooltip" role="tooltip" aria-hidden="true">
        <slot name="tooltip-label" />
    </div>
</element-with-tooltip>
<style lang="scss">
    @use "../../sass/abstracts" as *;

    .project-link-container {
        position: relative;
    }

    .project-link-anchor {
        font-size: $fs-500;
        color: $primary-800;
        display: grid;
        place-items: center;
        margin-top: 2rem;
        transition: 200ms ease-in-out;
        padding: 10px 2px 5px;

        span {
            font-weight: $semi-bold;
        }

        &:focus-visible {
            outline: 3px solid $blue-sapphire;
        }

        &:visited {
            color: $primary-800;
        }
    }

    .link-tooltip {
        visibility: hidden;
        transition: visibility 250ms ease-out 1000ms;
        background: $primary-950;
        padding: 0.5rem;
        border-radius: 0.5rem;
        width: max-content;
        position: absolute;
        top: 0;
        left: 0;
    }

    .link-tooltip-label {
        font-weight: $semi-bold;
        color: $primary-50;
        font-size: $fs-400;
        letter-spacing: 0.15rem;
    }

    .link-tooltip-arrow {
        position: absolute;
        background: $primary-950;
        width: 0.5rem;
        height: 0.5rem;
        transform: rotate(45deg);
    }
</style>
<script>
    /*  Floating UI utility */
    import { computePosition, flip, shift, offset, arrow } from "@floating-ui/dom";
    /* Types */
    import type { Placement, Coords } from "@floating-ui/dom";
    /* create a subtype for only simplified placements */
    type TopRightBottomOrLeft = Extract<Placement, "top" | "right" | "bottom" | "left">;
    class ElementWithTooltip extends HTMLElement {
        /* constructor contains scripts to run on every instance of loading the element. */
        constructor() {
            /* Call super() before adding scripts to a custom element */
            super();
        }
        /* connectedCallback is a lifecycle method that runs when the element is added to the DOM */
        connectedCallback() {
            /* Get the dom elements */
            const projectLink: HTMLAnchorElement | null =
                this.querySelector(".project-link-anchor");
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            const arrowElement: HTMLDivElement | null = this.querySelector(".link-tooltip-arrow");
            /* Ensure the elements are defined */
            if (!projectLink) throw new Error("projectLink anchor element is undefined");
            if (!tooltip) throw new Error("tooltip element is undefined");
            if (!arrowElement) throw new Error("arrowElement is undefined");
            type ValidEvents = "mouseenter" | "mouseleave" | "focus" | "blur" | "keydown";
            const eventMap: ReadonlyMap<ValidEvents, VoidFunction | EventListener> = new Map<
                ValidEvents,
                VoidFunction | EventListener
            >([
                ["mouseenter", this.showTooltip.bind(this)],
                ["mouseleave", this.hideTooltip.bind(this)],
                ["focus", this.showTooltip.bind(this)],
                ["blur", this.hideTooltip.bind(this)],
                ["keydown", this.getEscapeKeyInput.bind(this)],
            ]);
            eventMap.forEach((fn, event) => {
                projectLink.addEventListener(event, fn);
            });
        }
        isArrowData(input: unknown): input is Partial<Coords> & {
            centerOffset: number;
            alignmentOffset?: number;
        } {
            if (!input) return false;
            if (typeof input !== "object") return false;
            if (!("centerOffset" in input)) return false;
            return "x" in input || "y" in input;
        }
        isTopRightBottomOrLeft(input: unknown): input is TopRightBottomOrLeft {
            if (typeof input !== "string") return false;
            return ["top", "right", "bottom", "left"].includes(input);
        }
        update({
            projectLink,
            tooltip,
            arrowElement,
        }: {
            projectLink: HTMLAnchorElement;
            tooltip: HTMLDivElement;
            arrowElement: HTMLDivElement;
        }) {
            computePosition(projectLink, tooltip, {
                placement: "top",
                middleware: [
                    offset(5),
                    flip(),
                    shift({ padding: 5 }),
                    arrow({ element: arrowElement, padding: 5 }),
                ],
            }).then(({ x, y, placement, middlewareData }) => {
                Object.assign(tooltip.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
                // get the data for the arrow placement
                const getArrowData = (data: typeof middlewareData.arrow) => {
                    if (!data) throw new Error("data passed to getArrowData is undefined");
                    if (data.x) return { x: data.x, y: undefined, ...data };
                    if (data.y) return { x: undefined, y: data.y, ...data };
                    throw new Error("middlewareData.arrow is not a valid object");
                };
                const arrowData = getArrowData(middlewareData.arrow);
                const { x: arrowX, y: arrowY } = arrowData;
                const simplePlacement = placement.split("-")[0]?.trim();
                if (!this.isTopRightBottomOrLeft(simplePlacement))
                    throw new Error("simplePlacement is not a valid string");
                const staticSide = {
                    top: "bottom",
                    right: "left",
                    bottom: "top",
                    left: "right",
                }[simplePlacement];

                Object.assign(arrowElement.style, {
                    left: typeof arrowX === "number" ? `${arrowX}px` : "",
                    top: typeof arrowY === "number" ? `${arrowY}px` : "",
                    right: "",
                    bottom: "",
                    [staticSide]: "-0.25rem",
                });
            });
        }
        showTooltip() {
            const projectLink: HTMLAnchorElement | null =
                this.querySelector(".project-link-anchor");
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            const arrowElement: HTMLDivElement | null = this.querySelector(".link-tooltip-arrow");
            if (!projectLink) throw new Error("projectLink anchor element is undefined");
            if (!arrowElement) throw new Error("arrowElement is undefined");
            if (tooltip) {
                tooltip.style.transition = "visibility 250ms ease-out 1000ms";
                tooltip.style.visibility = "visible";
                this.update({ projectLink, tooltip, arrowElement });
            }
        }
        hideTooltip() {
            const tooltip: HTMLDivElement | null = this.querySelector(".link-tooltip");
            if (tooltip) {
                tooltip.style.transition = "visibility 250ms ease-out";
                tooltip.style.visibility = "hidden";
            }
        }
        getEscapeKeyInput(event: Event) {
            if (event instanceof KeyboardEvent) {
                if (event.key === "Escape") {
                    this.hideTooltip();
                }
            }
            return;
        }
        disconnectedCallback() {
            const projectLink = this.querySelector(".project-link-anchor");
            if (projectLink) {
                projectLink.removeEventListener("mouseenter", this.showTooltip.bind(this));
                projectLink.removeEventListener("mouseleave", this.hideTooltip.bind(this));
                projectLink.removeEventListener("focus", this.showTooltip.bind(this));
                projectLink.removeEventListener("blur", this.hideTooltip.bind(this));
                projectLink.removeEventListener("keydown", this.getEscapeKeyInput.bind(this));
            }
        }
    }
    customElements.define("element-with-tooltip", ElementWithTooltip);
</script> -->
